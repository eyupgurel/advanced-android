apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId "com.alienstar.cyrus.advancedandroid"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "com.alienstar.cyrus.advancedandroid.test.CustomTestRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:design:$rootProject.supportLibraryVersion"
    implementation "com.android.support:cardview-v7:$rootProject.supportLibraryVersion"

    implementation "com.google.dagger:dagger:$rootProject.daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$rootProject.daggerVersion"
    annotationProcessor "com.google.dagger:dagger-compiler:$rootProject.daggerVersion"

    implementation "com.squareup.retrofit2:retrofit:$rootProject.retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$rootProject.retrofitVersion"
    implementation "com.squareup.retrofit2:converter-moshi:$rootProject.retrofitVersion"
    implementation "com.squareup.moshi:moshi:$rootProject.moshiVersion"
    annotationProcessor "com.ryanharter.auto.value:auto-value-moshi:$rootProject.autoValueMoshiVersion"
    compileOnly "com.ryanharter.auto.value:auto-value-moshi-annotations:$rootProject.autoValueMoshiVersion"

    compileOnly "com.google.auto.value:auto-value:$rootProject.autoValueVersion"
    annotationProcessor "com.google.auto.value:auto-value:$rootProject.autoValueVersion"
    implementation "io.reactivex.rxjava2:rxjava:$rootProject.rxJavaVersion"
    implementation "io.reactivex.rxjava2:rxandroid:$rootProject.rxAndroidVersion"
    implementation "com.jakewharton.rxrelay2:rxrelay:$rootProject.rxRelayVersion"
    implementation "com.jakewharton.rxbinding2:rxbinding:$rootProject.rxBindingVersion"

    implementation "com.jakewharton.threetenabp:threetenabp:$rootProject.threeTenAbpVersion"
    implementation "com.jakewharton.timber:timber:$rootProject.timberVersion"
    implementation "com.jakewharton:butterknife:$rootProject.butterknifeVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$rootProject.butterknifeVersion"
    implementation "com.bluelinelabs:conductor:$rootProject.conductorVersion"

    implementation "com.github.bumptech.glide:glide:$rootProject.glideVersion"

    testImplementation "org.mockito:mockito-core:$rootProject.mockitoVersion"
    testImplementation "junit:junit:$rootProject.junitVersion"

    androidTestAnnotationProcessor "com.google.dagger:dagger-compiler:$rootProject.daggerVersion"
    androidTestImplementation "com.android.support.test:runner:$rootProject.testRunnerVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$rootProject.espressoVersion"
}

def mockCopySpec = copySpec {
    from rootProject.file('app/')
    include 'mock/'
}

task copyMock(type: Copy){
    ['src/test/resources', 'src/androidTest/resources'].each { dest ->
        copy {
            with mockCopySpec
            into dest
        }
    }
}

build.finalizedBy(copyMock)

